frankenstein(ui, server)
ui <- function(request) {
fluidPage(
textInput("txt", "Enter text"),
checkboxInput("caps", "Capitalize"),
verbatimTextOutput("out")
)
}
server <- function(input, output, session) {
monitor(session, 1000)
output$out <- renderText({
if (input$caps)
toupper(input$txt)
else
input$txt
})
}
frankenstein(ui, server)
library(yesno)
folder = "shiny_bookmarks"
yesno("This function will remove all files from", folder)
if (yesno("This function will recursively remove all files from ", folder, ". Are you sure?")) {
if(save_last){
} else {
a <- list.files(folder, all.files = TRUE, full.names = TRUE, recursive = TRUE)
lapply(a, unlink)
}
}
last_state <- get_last_state(folder)
get_last_state <- function(folder = "shiny_bookmarks"){
a <- list.files(shiny_bookmark, full.names = TRUE)
if (length(a) == 0){
cat(green("No previous state found"), "\n")
Sys.sleep(1)
return(0)
}  else {
last_state <- do.call(rbind, lapply(a, file.info))
last_state$name <- basename(a)
last_state <- last_state[rev(order(last_state$mtime)), ]
last_state <- last_state$name[1]
return(last_state)
}
}
last_state <- get_last_state(folder)
last_state
a <- list.files(folder, all.files = TRUE, full.names = TRUE, recursive = TRUE)
a
grepl(last_state, a)
!grepl(last_state, a)
dispose <- function(folder = "shiny_bookmarks", save_last = TRUE){
if (yesno("This function will recursively remove all files from ", folder, ". Are you sure?")) {
if(save_last){
last_state <- get_last_state(folder)
a <- list.files(folder, all.files = TRUE, full.names = TRUE, recursive = TRUE)
a <- a[!grepl(last_state, a)]
} else {
a <- list.files(folder, all.files = TRUE, full.names = TRUE, recursive = TRUE)
}
lapply(a, unlink)
}
}
get_last_state <- function(folder = "shiny_bookmarks"){
a <- list.files(shiny_bookmark, full.names = TRUE)
if (length(a) == 0){
cat(green("No previous state found"), "\n")
Sys.sleep(1)
return(0)
}  else {
last_state <- do.call(rbind, lapply(a, file.info))
last_state$name <- basename(a)
last_state <- last_state[rev(order(last_state$mtime)), ]
last_state <- last_state$name[1]
return(last_state)
}
}
dispose(folder ="shiny_bookmarks", save_last = TRUE)
dispose <- function(folder = "shiny_bookmarks", save_last = TRUE){
if (yesno("This function will recursively remove all files from ", folder, ". Are you sure?")) {
browser()
if(save_last){
last_state <- get_last_state(folder)
a <- list.files(folder, all.files = TRUE, full.names = TRUE, recursive = TRUE)
a <- a[!grepl(last_state, a)]
} else {
a <- list.files(folder, all.files = TRUE, full.names = TRUE, recursive = TRUE)
}
lapply(a, unlink)
}
}
dispose(folder ="shiny_bookmarks", save_last = TRUE)
last_state <- get_last_state(folder)
last_state
a <- list.files(folder, all.files = TRUE, full.names = TRUE, recursive = TRUE)
a <- a[!grepl(last_state, a)]
a
lapply(a, unlink)
a
last_state <- get_last_state(folder)
last_state
a <- list.files(folder, all.files = TRUE, full.names = TRUE)
a
a <- a[!grepl(last_state, a)]
lapply(a, unlink)
a
unlink("shiny_bookmarks/fbc311558cdb8448")
unlink("shiny_bookmarks/fe2e609f53379bd3")
unlink("shiny_bookmarks/fe2e609f53379bd3", force = TRUE)
unlink("shiny_bookmarks/fe2e609f53379bd3", force = TRUE, recursive = TRUE)
dispose <- function(folder = "shiny_bookmarks", save_last = TRUE){
if (yesno("This function will recursively remove all files from ", folder, ". Are you sure?")) {
browser()
if(save_last){
last_state <- get_last_state(folder)
a <- list.files(folder, all.files = TRUE, full.names = TRUE)
a <- a[!grepl(last_state, a)]
} else {
a <- list.files(folder, all.files = TRUE, full.names = TRUE)
}
lapply(a, unlink, force = TRUE, recursive = TRUE)
}
}
dispose(folder ="shiny_bookmarks", save_last = TRUE)
colin::new_r_file("frankenstein")
colin::new_r_file("chock")
colin::init_data_raw()
library(desc)
unlink("DESCRIPTION")
my_desc <- description$new("!new")
my_desc$set("Package", name)
my_desc <- description$new("!new")
my_desc$set("Package", "frankenstein")
my_desc$set("Authors@R", "person('Colin', 'Fay', email = 'contact@colinfay.me', role = c('cre', 'aut'))")
my_desc$del("Maintainer")
my_desc$set_version("0.0.0.9000")
my_desc$set(Title = "frankenstein")
my_desc$set(Description = "Bring your Shiny App back from the dead.")
my_desc$set(Title = "Bring your Shiny App back from the dead")
my_desc$set(Description = "Bring your Shiny App back from the dead.")
my_desc$set("BugReports", glue("https://github.com/Thinkr-open/frankenstein/issues"))
my_desc$set("URL", "https://github.com/Thinkr-open/frankenstein")
my_desc$set("BugReports", "https://github.com/Thinkr-open/frankenstein/issues")
my_desc$write(file = "DESCRIPTION")
colin::init_docs()
usethis::use_code_of_conduct()
usethis::use_package("attempt")
usethis::use_package("shiny")
usethis::use_package("glue")
usethis::use_package("crayon")
usethis::use_build_ignore("readme_fig/")
dir.create("readme_fig")
usethis::use_build_ignore("readme_fig/")
usethis::use_lifecycle_badge("Experimental")
#' @importFrom attempt stop_if_not
frankenstein <- function(ui = NULL, server = NULL, onStart = NULL, options = list(),
uiPattern = "/", enableBookmarking = "server",
restore = TRUE, shiny_bookmark = "shiny_bookmarks"){
if (restore){
last_state <- get_last_state(shiny_bookmark)
if (last_state == 0){
cat(green("No previous state found"), "\n")
Sys.sleep(1)
cat(yellow("Launching the App"), "\n")
} else {
cat( green( glue( "Last id found : {last_state}" ) ), "\n")
Sys.sleep(1)
cat(yellow("Launching the App"), "\n")
options$launch.browser <- function(appUrl){
url <- glue('{appUrl}/?_state_id_={last_state}')
browseURL(url)
}
}
}
attempt::stop_if_not(enableBookmarking, ~ .x == "server", "Can only bookmark from server")
ShinySession <- getFromNamespace("ShinySession", "shiny")
ShinySession$set(
which = "public",
name = "chock",
value = chock(),
overwrite = TRUE)
ui_fun <- ui
shinyApp(ui_fun, server, onStart, options, uiPattern, enableBookmarking)
}
chock <- function(static_id = NULL){
function ()
{
tryCatch(withLogErrors({
saveState <- ShinySaveState$new(input = self$input, exclude = self$getBookmarkExclude(),
onSave = function(state) {
private$bookmarkCallbacks$invoke(state)
})
url <- saveShinySaveState(saveState)
id <- gsub("_state_id_=(.*)", "\\1", url)
clientData <- self$clientData
url <- paste0(clientData$url_protocol, "//", clientData$url_hostname,
if (nzchar(clientData$url_port))
paste0(":", clientData$url_port), clientData$url_pathname,
"?", url)
if (private$bookmarkedCallbacks$count() > 0) {
private$bookmarkedCallbacks$invoke(url)
}
else {
cat(crayon::green(glue::glue("Saving state {id}")), sep = "\n")
}
}), error = function(e) {
cat(crayon::red(glue::glue("Unabled to save the state")), sep = "\n")
})
}
}
monitor <- function(session, intervalMs){
autoInvalidate <- reactiveTimer(intervalMs)
observe({
autoInvalidate()
session$chock()
})
}
dispose <- function(folder = "shiny_bookmarks", save_last = TRUE){
if (yesno("This function will recursively remove all files from ", folder, ". Are you sure?")) {
browser()
if(save_last){
last_state <- get_last_state(folder)
a <- list.files(folder, all.files = TRUE, full.names = TRUE)
a <- a[!grepl(last_state, a)]
} else {
a <- list.files(folder, all.files = TRUE, full.names = TRUE)
}
lapply(a, unlink, force = TRUE, recursive = TRUE)
}
}
get_last_state <- function(folder = "shiny_bookmarks"){
a <- list.files(shiny_bookmark, full.names = TRUE)
if (length(a) == 0){
cat(green("No previous state found"), "\n")
Sys.sleep(1)
return(0)
}  else {
last_state <- do.call(rbind, lapply(a, file.info))
last_state$name <- basename(a)
last_state <- last_state[rev(order(last_state$mtime)), ]
last_state <- last_state$name[1]
return(last_state)
}
}
ui <- function(request) {
fluidPage(
textInput("txt", "Enter text"),
checkboxInput("caps", "Capitalize"),
verbatimTextOutput("out"),
actionButton("fo","fo")
)
}
server <- function(input, output, session) {
observeEvent(input$fo, {
session$chock()
})
output$out <- renderText({
if (input$caps)
toupper(input$txt)
else
input$txt
})
}
frankenstein(ui, server)
library(shiny)
ui <- function(request) {
fluidPage(
textInput("txt", "Enter text"),
checkboxInput("caps", "Capitalize"),
verbatimTextOutput("out"),
actionButton("fo","fo")
)
}
server <- function(input, output, session) {
observeEvent(input$fo, {
session$chock()
})
output$out <- renderText({
if (input$caps)
toupper(input$txt)
else
input$txt
})
}
frankenstein(ui, server)
chock <- function(static_id = NULL){
function ()
{
tryCatch(withLogErrors({
saveState <- ShinySaveState$new(input = self$input, exclude = self$getBookmarkExclude(),
onSave = function(state) {
private$bookmarkCallbacks$invoke(state)
})
url <- saveShinySaveState(saveState)
id <- gsub("_state_id_=(.*)", "\\1", url)
clientData <- self$clientData
url <- paste0(clientData$url_protocol, "//", clientData$url_hostname,
if (nzchar(clientData$url_port))
paste0(":", clientData$url_port), clientData$url_pathname,
"?", url)
if (private$bookmarkedCallbacks$count() > 0) {
private$bookmarkedCallbacks$invoke(url)
}
else {
cat(crayon::green(glue::glue("Saving state {id}")), sep = "\n")
}
}), error = function(e) {
cat(crayon::red(glue::glue("Unabled to save the state")), sep = "\n")
})
}
}
monitor <- function(session, intervalMs){
autoInvalidate <- reactiveTimer(intervalMs)
observe({
autoInvalidate()
session$chock()
})
}
dispose <- function(folder = "shiny_bookmarks", save_last = TRUE){
if (yesno("This function will recursively remove all files from ", folder, ". Are you sure?")) {
browser()
if(save_last){
last_state <- get_last_state(folder)
a <- list.files(folder, all.files = TRUE, full.names = TRUE)
a <- a[!grepl(last_state, a)]
} else {
a <- list.files(folder, all.files = TRUE, full.names = TRUE)
}
lapply(a, unlink, force = TRUE, recursive = TRUE)
}
}
get_last_state <- function(folder = "shiny_bookmarks"){
a <- list.files(folder, full.names = TRUE)
if (length(a) == 0){
cat(green("No previous state found"), "\n")
Sys.sleep(1)
return(0)
}  else {
last_state <- do.call(rbind, lapply(a, file.info))
last_state$name <- basename(a)
last_state <- last_state[rev(order(last_state$mtime)), ]
last_state <- last_state$name[1]
return(last_state)
}
}
frankenstein(ui, server)
devtools::load_all()
frankenstein(ui, server)
library(attempt)
library(shiny)
library(glue)
library(crayon)
frankenstein(ui, server)
frankenstein(ui, server)
ui <- function(request) {
fluidPage(
textInput("txt", "Enter text"),
checkboxInput("caps", "Capitalize"),
verbatimTextOutput("out")
)
}
server <- function(input, output, session) {
monitor(session, 1000)
output$out <- renderText({
if (input$caps)
toupper(input$txt)
else
input$txt
})
}
frankenstein(ui, server)
folder = "shiny_bookmarks"
last_state <- get_last_state(folder)
last_state
a <- list.files(folder)
a
a <- list.files(folder, all.files = TRUE, full.names = TRUE)
a
a <- list.files(folder, full.names = TRUE)
a
a <- a[!grepl(last_state, a)]
lapply(a, unlink, recursive = TRUE)
sink(lapply(a, unlink, recursive = TRUE))
sink(lapply(a, unlink, recursive = TRUE), file = NULL)
purrr::walk
dispose <- function(folder = "shiny_bookmarks", save_last = TRUE){
if (yesno("This function will recursively remove all files from ", folder, ". Are you sure?")) {
if(save_last){
last_state <- get_last_state(folder)
a <- list.files(folder, full.names = TRUE)
a <- a[!grepl(last_state, a)]
} else {
a <- list.files(folder, all.files = TRUE, full.names = TRUE)
}
x <- lapply(a, unlink, recursive = TRUE)
invisible(x)
}
}
ui <- function(request) {
fluidPage(
textInput("txt", "Enter text"),
checkboxInput("caps", "Capitalize"),
verbatimTextOutput("out")
)
}
server <- function(input, output, session) {
monitor(session, 1000)
output$out <- renderText({
if (input$caps)
toupper(input$txt)
else
input$txt
})
}
frankenstein(ui, server)
dispose(folder ="shiny_bookmarks", save_last = TRUE)
usethis::use_package("yesno")
library(yesno)
dispose(folder ="shiny_bookmarks", save_last = TRUE)
shinyApp(ui, server)
shinyApp(ui, server)
ui <- function(request) {
fluidPage(
textInput("txt", "Enter text"),
checkboxInput("caps", "Capitalize"),
verbatimTextOutput("out")
)
}
server <- function(input, output, session) {
monitor(session, 1000)
output$out <- renderText({
if (input$caps)
toupper(input$txt)
else
input$txt
})
}
shinyApp(ui, server)
#' @importFrom attempt stop_if_not
frankenstein <- function(ui = NULL, server = NULL, onStart = NULL, options = list(),
uiPattern = "/", enableBookmarking = "server",
restore = TRUE, shiny_bookmark = "shiny_bookmarks"){
if (restore){
last_state <- get_last_state(shiny_bookmark)
if (last_state == 0){
cat(green("No previous state found"), "\n")
Sys.sleep(1)
cat(yellow("Launching the App"), "\n")
} else {
cat( green( glue( "Last id found : {last_state}" ) ), "\n")
Sys.sleep(1)
cat(yellow("Launching the App"), "\n")
options$launch.browser <- function(appUrl){
url <- glue('{appUrl}/?_state_id_={last_state}')
browseURL(url)
}
}
}
attempt::stop_if_not(enableBookmarking, ~ .x == "server", "Can only bookmark from server")
ShinySession <- getFromNamespace("ShinySession", "shiny")
on.exit(
rm(ShinySession)
)
ShinySession$set(
which = "public",
name = "chock",
value = chock(),
overwrite = TRUE)
ui_fun <- ui
shinyApp(ui_fun, server, onStart, options, uiPattern, enableBookmarking)
}
ui <- function(request) {
fluidPage(
textInput("txt", "Enter text"),
checkboxInput("caps", "Capitalize"),
verbatimTextOutput("out"),
actionButton("fo","fo")
)
}
server <- function(input, output, session) {
observeEvent(input$fo, {
session$chock()
})
output$out <- renderText({
if (input$caps)
toupper(input$txt)
else
input$txt
})
}
shinyApp(ui, server)
frankenstein(ui, server)
shinyApp(ui, server)
ui_req <- function(request) {
fluidPage(
textInput("txt", "Enter text"),
checkboxInput("caps", "Capitalize"),
verbatimTextOutput("out"),
actionButton("fo","fo")
)
}
server <- function(input, output, session) {
observeEvent(input$fo, {
session$chock()
})
output$out <- renderText({
if (input$caps)
toupper(input$txt)
else
input$txt
})
}
shinyApp(ui_req, server)
shinyApp(ui_req, server)
