#' @importFrom crayon green red
#' @importFrom glue glue
#' @importFrom shiny withLogErrors isolate getShinyOption
chock <- function(scenario =  NULL){
  function ()
  {
    tryCatch(shiny::withLogErrors({
      saveState <- ShinySaveState$new(input = self$input, exclude = self$getBookmarkExclude(),
                                      onSave = function(state) {
                                        private$bookmarkCallbacks$invoke(state)
                                      })
      saveShinySaveState <- function (state, scenario) {
        browser()
        id <- createUniqueId(8)
        saveState <- function(stateDir) {
          state$dir <- stateDir
          if (!is.null(state$onSave)) 
            shiny::isolate(state$onSave(state))
          exclude <- c(state$exclude, "._bookmark_")
          inputValues <- serializeReactiveValues(state$input, exclude, 
                                                 state$dir)
          saveRDS(inputValues, file.path(stateDir, "input.rds"))
          if (length(state$values) != 0) 
            saveRDS(state$values, file.path(stateDir, "values.rds"))
        }
        saveInterface <- shiny::getShinyOption("save.interface")
        if (is.null(saveInterface)) {
          if (inShinyServer()) {
            saveInterface <- function(id, callback) {
              stop("The hosting environment does not support saved-to-server bookmarking.")
            }
          }
          else {
            saveInterface <- saveInterfaceLocal
          }
        }
        saveInterface(id, saveState)
        paste0("_state_id_=", encodeURIComponent(id))
      }
      
      url <- saveShinySaveState(saveState)
      id <- gsub("_state_id_=(.*)", "\\1", url)
      
      clientData <- self$clientData
      url <- paste0(clientData$url_protocol, "//", clientData$url_hostname,
                    if (nzchar(clientData$url_port))
                      paste0(":", clientData$url_port), clientData$url_pathname,
                    "?", url)
      
      if (private$bookmarkedCallbacks$count() > 0) {
        private$bookmarkedCallbacks$invoke(url)
      }
      else {
        cat(crayon::green(glue::glue("Saving state {id} at {Sys.time()}")), sep = "\n")
      }
    }), error = function(e) {
      cat(crayon::red(glue::glue("Unabled to save the state")), sep = "\n")
    })
  }
}