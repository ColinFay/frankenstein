Creature <- R6::R6Class("Creature", 
                        public = list(
                          ui = NULL, 
                          server = NULL, 
                          onStart = NULL, 
                          options = list(),
                          uiPattern = "/", 
                          enableBookmarking = "server",
                          scenario = "shiny_bookmarks",
                          initialize = function(ui = NULL, 
                                                server = NULL, 
                                                onStart = NULL, 
                                                options = list(),
                                                uiPattern = "/", 
                                                enableBookmarking = "server", 
                                                scenario = "shiny_bookmarks"
                                                ){
                            attempt::stop_if_not(ui, is.function, 
                                                 "ui should be a function with `request` as argument")
                            self$ui <- ui
                            self$server <- server 
                            self$onStart <- onStart 
                            self$options <- options
                            self$uiPattern <- uiPattern 
                            self$enableBookmarking <- shiny::enableBookmarking
                            self$scenario <- scenario
                          }, 
                          
                          as_fresh = function(ui = NULL, 
                                              server = NULL, 
                                              overwrite = TRUE){
                            if (!dir.exists(self$scenario)){
                              dir.create(self$scenario)
                            }
                            if (!is.null(ui)){
                              if (overwrite){
                                self$ui <- ui
                              }
                            } else {
                              ui <- self$ui
                            }
                            
                            if (!is.null(server)){
                              if (overwrite){
                                self$server <- server
                              }
                            } else {
                              server <- self$server
                            }
                            ShinySession <- utils::getFromNamespace("ShinySession", "shiny")
                            
                            ShinySession$set(
                              which = "public",
                              name = "chock",
                              value = chock(),
                              overwrite = TRUE)
                            
                            ui_fun <- ui
                            shiny::shinyApp(ui_fun, server, 
                                     self$onStart, self$options, 
                                     self$uiPattern, self$enableBookmarking)
                            
                          }, 
                          
                          revive = function(ui = NULL, 
                                            server = NULL, 
                                            overwrite = TRUE,
                                            id = NULL){
                            if (!dir.exists(self$scenario)){
                              dir.create(self$scenario)
                            }
                            if (!is.null(ui)){
                              if (overwrite){
                                self$ui <- ui
                              }
                            } else {
                              ui <- self$ui
                            }
                            
                            if (!is.null(server)){
                              if (overwrite){
                                self$server <- server
                              }
                            } else {
                              server <- self$server
                            }

                            if (!is.null(id)){
                              cat( crayon::green( glue::glue( "Launching from id : {id}" ) ), "\n")
                              Sys.sleep(1)
                              self$options$launch.browser <- function(appUrl){
                                
                                url <- glue::glue('{appUrl}/?_state_id_={id}')
                                #getOption("shiny.launch.browser", interactive())
                                #browseURL(url)
                                invisible(.Call("rs_shinyviewer", url, getwd(), 3))
                              }
                            } else {
                              last_state <- get_last_state(self$scenario)
                              if (last_state == 0){
                                cat(crayon::green("No previous state found"), "\n")
                                Sys.sleep(1)
                                cat(crayon::yellow("Launching the App"), "\n")
                              } else {
                                cat( crayon::green( glue::glue( "Last id found : {last_state}" ) ), "\n")
                                Sys.sleep(1)
                                cat(crayon::yellow("Launching the App"), "\n")
                                
                                self$options$launch.browser <- function(appUrl){
                                  url <- glue::glue('{appUrl}/?_state_id_={last_state}')
                                  utils::browseURL(url)
                                }
                              } 
                            }
                            
                            attempt::stop_if_not(shiny::enableBookmarking, ~ .x == "server", "Can only bookmark from server")
                            ShinySession <- utils::getFromNamespace("ShinySession", "shiny")
                            
                            ShinySession$set(
                              which = "public",
                              name = "chock",
                              value = chock(),
                              overwrite = TRUE)
                            
                            ui_fun <- ui
                            shiny::shinyApp(ui_fun, server, 
                                     self$onStart, self$options, 
                                     self$uiPattern, self$enableBookmarking)
                            
                          }, 
                          
                          list_states = function(folder =  "shiny_bookmarks"){
                            a <- list.files(folder, full.names = TRUE)
                            if (length(a) == 0){
                              cat(crayon::green("No previous state found"), "\n")
                              Sys.sleep(1)
                              return(0)
                            }  else {
                              last_state <- do.call(rbind, lapply(a, file.info))
                              last_state$name <- basename(a)
                              last_state <- last_state[rev(order(last_state$mtime)), ]
                              row.names(last_state) <- NULL
                              last <- last_state[, c("name", "mtime")]
                              names(last) <- c("id","last_modified_time")
                              return(last)
                            }
                          }, 
                          
                          dispose = function(folder = "shiny_bookmarks", save_last = TRUE){
                            if (yesno::yesno("This function will recursively remove all files from ", folder, ". Are you sure?")) {
                              if(save_last){
                                last_state <- get_last_state(folder)
                                a <- list.files(folder, full.names = TRUE)
                                a <- a[!grepl(last_state, a)]
                              } else {
                                a <- list.files(folder, all.files = TRUE, full.names = TRUE)
                              }
                              x <- lapply(a, unlink, recursive = TRUE)
                              invisible(x)
                            }
                          }
                        )
)

